<#@ template debug="false" hostspecific="true" language="C#" #>

<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>		 
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>	
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ assembly Name="EnvDTE" #>
<#@ Import Namespace="EnvDTE" #>
<#@ assembly name="System.Xml.dll" #>

<#    
    string fileName1 = this.Host.ResolvePath("../DatabaseContext/ModelArchContext.cs");
    List<string> classNames = File.ReadLines(fileName1).ToList();
    string targetNamespace = "Model.DataAccess.Repositories";
    string dbContext = "ModelArchContext";  

  classNames = classNames.Where(c => c.Contains("DbSet")).
                 Select(ss => ss.Substring(ss.IndexOf("<") + 1, ss.IndexOf(">") - (ss.IndexOf("<") + 1 ) )).ToList();

    GenerateRepositories(targetNamespace, classNames, dbContext);
#>

<#+
    public void GenerateRepositories(string targetNamespace, List<string> classNames, string dbContext)
    {
        foreach(string className in classNames)
        {            
            var repositoryName = className + "Repository";
            #>    
using Model.DataAccess.DatabaseContext;
using Model.DataAccess.Models;								   
              
public class <#= repositoryName #> : GenericRepository<<#= className #>>
{   
    public <#= repositoryName #>(<#= dbContext #> context) : base (context)
    {
      
    }

    //Override any generic method for your own custom implemention, add new repository methods to the I<#= repositoryName #>.cs file
}

<#+  CreateFile(className + "Repository.cs"); #>
<#+   
  }
} 
#>

<#+

 public void CreateFile(string fileName)
    {
        ProcessContent(fileName, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Remove(0, this.GenerationEnvironment.Length);
    }

 public void ProcessContent(string outputFileName, string content)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);
        string outputDirectoryPath = Path.GetDirectoryName(outputFilePath);        

        if(!Directory.Exists(outputDirectoryPath))
        {
            Directory.CreateDirectory(outputDirectoryPath);
        }
			 if(!File.Exists(outputFilePath))
			 {
        File.WriteAllText(outputFilePath, content);

        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        ProjectItem containingProjectItem = dte.Solution.FindProjectItem(Host.TemplateFile);
        containingProjectItem.ProjectItems.AddFromFile(outputFilePath);
		}
    }

#>
